// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// FastSPGM_CV_FDR
List FastSPGM_CV_FDR(NumericMatrix x, NumericVector D_0, NumericVector D_1, double kfold, double nlambda, double step_size, bool intercept, bool global, Nullable<NumericVector> regularization, Nullable<NumericVector> alpha, double N, double delta_upper, Nullable<NumericMatrix> true_graph);
RcppExport SEXP _ModPGMInference_FastSPGM_CV_FDR(SEXP xSEXP, SEXP D_0SEXP, SEXP D_1SEXP, SEXP kfoldSEXP, SEXP nlambdaSEXP, SEXP step_sizeSEXP, SEXP interceptSEXP, SEXP globalSEXP, SEXP regularizationSEXP, SEXP alphaSEXP, SEXP NSEXP, SEXP delta_upperSEXP, SEXP true_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D_0(D_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D_1(D_1SEXP);
    Rcpp::traits::input_parameter< double >::type kfold(kfoldSEXP);
    Rcpp::traits::input_parameter< double >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type regularization(regularizationSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type delta_upper(delta_upperSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type true_graph(true_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(FastSPGM_CV_FDR(x, D_0, D_1, kfold, nlambda, step_size, intercept, global, regularization, alpha, N, delta_upper, true_graph));
    return rcpp_result_gen;
END_RCPP
}
// FastSPGM_EBIC_FDR
List FastSPGM_EBIC_FDR(NumericMatrix x, NumericVector D_0, NumericVector D_1, double gamma, double nlambda, double step_size, bool intercept, bool global, Nullable<NumericVector> regularization, Nullable<NumericVector> alpha, double N, double delta_upper, Nullable<NumericMatrix> true_graph);
RcppExport SEXP _ModPGMInference_FastSPGM_EBIC_FDR(SEXP xSEXP, SEXP D_0SEXP, SEXP D_1SEXP, SEXP gammaSEXP, SEXP nlambdaSEXP, SEXP step_sizeSEXP, SEXP interceptSEXP, SEXP globalSEXP, SEXP regularizationSEXP, SEXP alphaSEXP, SEXP NSEXP, SEXP delta_upperSEXP, SEXP true_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D_0(D_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D_1(D_1SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type regularization(regularizationSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type delta_upper(delta_upperSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type true_graph(true_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(FastSPGM_EBIC_FDR(x, D_0, D_1, gamma, nlambda, step_size, intercept, global, regularization, alpha, N, delta_upper, true_graph));
    return rcpp_result_gen;
END_RCPP
}
// FastSqrtPGM_CV_FDR
List FastSqrtPGM_CV_FDR(NumericMatrix x, double kfold, double nlambda, double step_size, bool intercept, bool global, Nullable<NumericVector> regularization, Nullable<NumericVector> alpha, double N, double delta_upper, Nullable<NumericMatrix> true_graph);
RcppExport SEXP _ModPGMInference_FastSqrtPGM_CV_FDR(SEXP xSEXP, SEXP kfoldSEXP, SEXP nlambdaSEXP, SEXP step_sizeSEXP, SEXP interceptSEXP, SEXP globalSEXP, SEXP regularizationSEXP, SEXP alphaSEXP, SEXP NSEXP, SEXP delta_upperSEXP, SEXP true_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type kfold(kfoldSEXP);
    Rcpp::traits::input_parameter< double >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type regularization(regularizationSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type delta_upper(delta_upperSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type true_graph(true_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(FastSqrtPGM_CV_FDR(x, kfold, nlambda, step_size, intercept, global, regularization, alpha, N, delta_upper, true_graph));
    return rcpp_result_gen;
END_RCPP
}
// FastSqrtPGM_EBIC_FDR
List FastSqrtPGM_EBIC_FDR(NumericMatrix x, double gamma, double nlambda, double step_size, bool intercept, bool global, Nullable<NumericVector> regularization, Nullable<NumericVector> alpha, double N, double delta_upper, Nullable<NumericMatrix> true_graph);
RcppExport SEXP _ModPGMInference_FastSqrtPGM_EBIC_FDR(SEXP xSEXP, SEXP gammaSEXP, SEXP nlambdaSEXP, SEXP step_sizeSEXP, SEXP interceptSEXP, SEXP globalSEXP, SEXP regularizationSEXP, SEXP alphaSEXP, SEXP NSEXP, SEXP delta_upperSEXP, SEXP true_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type regularization(regularizationSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type delta_upper(delta_upperSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type true_graph(true_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(FastSqrtPGM_EBIC_FDR(x, gamma, nlambda, step_size, intercept, global, regularization, alpha, N, delta_upper, true_graph));
    return rcpp_result_gen;
END_RCPP
}
// FastTPGM_CV_FDR
List FastTPGM_CV_FDR(NumericMatrix x, NumericVector D, double kfold, double nlambda, double step_size, bool intercept, bool global, Nullable<NumericVector> alpha, Nullable<NumericVector> regularization, double N, double delta_upper, Nullable<NumericMatrix> true_graph);
RcppExport SEXP _ModPGMInference_FastTPGM_CV_FDR(SEXP xSEXP, SEXP DSEXP, SEXP kfoldSEXP, SEXP nlambdaSEXP, SEXP step_sizeSEXP, SEXP interceptSEXP, SEXP globalSEXP, SEXP alphaSEXP, SEXP regularizationSEXP, SEXP NSEXP, SEXP delta_upperSEXP, SEXP true_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type kfold(kfoldSEXP);
    Rcpp::traits::input_parameter< double >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type regularization(regularizationSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type delta_upper(delta_upperSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type true_graph(true_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(FastTPGM_CV_FDR(x, D, kfold, nlambda, step_size, intercept, global, alpha, regularization, N, delta_upper, true_graph));
    return rcpp_result_gen;
END_RCPP
}
// FastTPGM_EBIC_FDR
List FastTPGM_EBIC_FDR(NumericMatrix x, NumericVector D, double gamma, double nlambda, double step_size, bool intercept, bool global, Nullable<NumericVector> alpha, Nullable<NumericVector> regularization, double N, double delta_upper, Nullable<NumericMatrix> true_graph);
RcppExport SEXP _ModPGMInference_FastTPGM_EBIC_FDR(SEXP xSEXP, SEXP DSEXP, SEXP gammaSEXP, SEXP nlambdaSEXP, SEXP step_sizeSEXP, SEXP interceptSEXP, SEXP globalSEXP, SEXP alphaSEXP, SEXP regularizationSEXP, SEXP NSEXP, SEXP delta_upperSEXP, SEXP true_graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type regularization(regularizationSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type delta_upper(delta_upperSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type true_graph(true_graphSEXP);
    rcpp_result_gen = Rcpp::wrap(FastTPGM_EBIC_FDR(x, D, gamma, nlambda, step_size, intercept, global, alpha, regularization, N, delta_upper, true_graph));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_SPGM
NumericMatrix Gibbs_SPGM(NumericVector psi, NumericMatrix theta, NumericVector D_0, NumericVector D_1, size_t nSample, Nullable<double> burn_in, Nullable<double> thin);
RcppExport SEXP _ModPGMInference_Gibbs_SPGM(SEXP psiSEXP, SEXP thetaSEXP, SEXP D_0SEXP, SEXP D_1SEXP, SEXP nSampleSEXP, SEXP burn_inSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D_0(D_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D_1(D_1SEXP);
    Rcpp::traits::input_parameter< size_t >::type nSample(nSampleSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_SPGM(psi, theta, D_0, D_1, nSample, burn_in, thin));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_SqrtPGM
NumericMatrix Gibbs_SqrtPGM(NumericVector psi, NumericMatrix theta, size_t nSample, Nullable<double> burn_in, Nullable<double> thin);
RcppExport SEXP _ModPGMInference_Gibbs_SqrtPGM(SEXP psiSEXP, SEXP thetaSEXP, SEXP nSampleSEXP, SEXP burn_inSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< size_t >::type nSample(nSampleSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_SqrtPGM(psi, theta, nSample, burn_in, thin));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_TPGM
NumericMatrix Gibbs_TPGM(NumericVector psi, NumericMatrix theta, NumericVector D, size_t nSample, Nullable<double> burn_in, Nullable<double> thin);
RcppExport SEXP _ModPGMInference_Gibbs_TPGM(SEXP psiSEXP, SEXP thetaSEXP, SEXP DSEXP, SEXP nSampleSEXP, SEXP burn_inSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< size_t >::type nSample(nSampleSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_TPGM(psi, theta, D, nSample, burn_in, thin));
    return rcpp_result_gen;
END_RCPP
}
// true_sd_SPGM
NumericMatrix true_sd_SPGM(NumericMatrix x, NumericVector psi, NumericMatrix theta, NumericVector D_0, NumericVector D_1);
RcppExport SEXP _ModPGMInference_true_sd_SPGM(SEXP xSEXP, SEXP psiSEXP, SEXP thetaSEXP, SEXP D_0SEXP, SEXP D_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D_0(D_0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D_1(D_1SEXP);
    rcpp_result_gen = Rcpp::wrap(true_sd_SPGM(x, psi, theta, D_0, D_1));
    return rcpp_result_gen;
END_RCPP
}
// true_sd_SqrtPGM
NumericMatrix true_sd_SqrtPGM(NumericMatrix x, NumericVector psi, NumericMatrix theta);
RcppExport SEXP _ModPGMInference_true_sd_SqrtPGM(SEXP xSEXP, SEXP psiSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(true_sd_SqrtPGM(x, psi, theta));
    return rcpp_result_gen;
END_RCPP
}
// true_sd_TPGM
NumericMatrix true_sd_TPGM(NumericMatrix x, NumericVector psi, NumericMatrix theta, NumericVector D);
RcppExport SEXP _ModPGMInference_true_sd_TPGM(SEXP xSEXP, SEXP psiSEXP, SEXP thetaSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(true_sd_TPGM(x, psi, theta, D));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ModPGMInference_FastSPGM_CV_FDR", (DL_FUNC) &_ModPGMInference_FastSPGM_CV_FDR, 13},
    {"_ModPGMInference_FastSPGM_EBIC_FDR", (DL_FUNC) &_ModPGMInference_FastSPGM_EBIC_FDR, 13},
    {"_ModPGMInference_FastSqrtPGM_CV_FDR", (DL_FUNC) &_ModPGMInference_FastSqrtPGM_CV_FDR, 11},
    {"_ModPGMInference_FastSqrtPGM_EBIC_FDR", (DL_FUNC) &_ModPGMInference_FastSqrtPGM_EBIC_FDR, 11},
    {"_ModPGMInference_FastTPGM_CV_FDR", (DL_FUNC) &_ModPGMInference_FastTPGM_CV_FDR, 12},
    {"_ModPGMInference_FastTPGM_EBIC_FDR", (DL_FUNC) &_ModPGMInference_FastTPGM_EBIC_FDR, 12},
    {"_ModPGMInference_Gibbs_SPGM", (DL_FUNC) &_ModPGMInference_Gibbs_SPGM, 7},
    {"_ModPGMInference_Gibbs_SqrtPGM", (DL_FUNC) &_ModPGMInference_Gibbs_SqrtPGM, 5},
    {"_ModPGMInference_Gibbs_TPGM", (DL_FUNC) &_ModPGMInference_Gibbs_TPGM, 6},
    {"_ModPGMInference_true_sd_SPGM", (DL_FUNC) &_ModPGMInference_true_sd_SPGM, 5},
    {"_ModPGMInference_true_sd_SqrtPGM", (DL_FUNC) &_ModPGMInference_true_sd_SqrtPGM, 3},
    {"_ModPGMInference_true_sd_TPGM", (DL_FUNC) &_ModPGMInference_true_sd_TPGM, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ModPGMInference(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
